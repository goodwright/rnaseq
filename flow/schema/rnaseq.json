{
    "inputs": {
        "sample_options": {
            "name": "Sample options",
            "description": "Parameters relating to the sample being analysed.",
            "advanced": false,
            "properties": {
                "input": {
                    "name": "Samples",
                    "type": "sample",
                    "pattern": "csv|xlsx",
                    "required": true,
                    "description": "The samples to process.",
                    "csv": {
                        "sample": {
                            "property": "name",
                            "user_override": false
                        },
                        "fastq_1": {
                            "property": "input.1",
                            "user_override": false
                        },
                        "fastq_2": {
                            "property": "input.2",
                            "user_override": false
                        },
                        "strandedness": {
                            "property": "strandedness", 
                            "user_override": true,
                            "valid": ["unstranded", "forward", "reverse", "auto"]
                        }
                    }
                }
            }
        },
        "genome_options": {
            "name": "Genome options",
            "description": "The genome being aligned to.",
            "advanced": false,
            "takes_genome": true,
            "properties": {
                "fasta": {
                    "name": "FASTA",
                    "type": "file",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "required": true,
                    "genome_file": "fasta",
                    "description": "A raw genome FASTA file."
                },
                "gtf": {
                    "name": "GTF",
                    "type": "file",
                    "pattern": "^\\S+\\.gtf(\\.gz)?$",
                    "required": true,
                    "genome_file": "gtf",
                    "description": "An annotation for the genome."
                },
                "gff": {
                    "name": "GFF",
                    "required": false,
                    "description": "Path to GFF3 annotation file.",
                    "pattern": "^\\S+\\.gff(\\.gz)?$",
                    "type": "file",
                    "genome_file": "gff"
                },
                "gencode": {
                    "name": "gencode",
                    "required": false,
                    "description": "Specify if your GTF annotation is in GENCODE format.",
                    "type": "boolean"
                },
                "gtf_extra_attributes": {
                    "name": "GTF Extra Attributes",
                    "required": false,
                    "description": "By default, the pipeline uses the `gene_name` field to obtain additional gene identifiers from the input GTF file when running Salmon.",
                    "default": "gene_name",
                    "type": "string"
                },
                "gtf_group_features": {
                    "name": "GTF Group Features",
                    "required": false,
                    "description": "Define the attribute type used to group features in the GTF file when running Salmon.",
                    "default": "gene_id",
                    "type": "string"
                },
                "featurecounts_group_type": {
                    "name": "Featurecounts Group Type",
                    "required": false,
                    "description": "The attribute type used to group feature types in the GTF file when generating the biotype plot with featureCounts.",
                    "default": "gene_biotype",
                    "type": "string"
                },
                "featurecounts_feature_type": {
                    "name": "Featurecounts Feature Type",
                    "required": false,
                    "description": "By default, the pipeline assigns reads based on the 'exon' attribute within the GTF file.",
                    "default": "exon",
                    "type": "string"
                },
                "gene_bed": {
                    "name": "BED",
                    "type": "file",
                    "pattern": "bed",
                    "required": false,
                    "genome_output": {
                        "process": "GTF2BED",
                        "filetype": "bed"
                    },
                    "description": "BED file containing gene intervals. This will be created from the GTF file if not specified."
                },
                "additional_fasta": {
                    "name": "Additional FASTA",
                    "type": "file",
                    "pattern": "fasta|fa$",
                    "required": false,
                    "description": "FASTA file to concatenate to genome FASTA file e.g. containing spike-in sequences."
                },
                "transcript_fasta": {
                    "name": "Transcript FASTA",
                    "type": "file",
                    "pattern": "fasta|fa$",
                    "required": false,
                    "genome_output": {
                        "process": "MAKE_TRANSCRIPTS_FASTA",
                        "filetype": "fa"
                    },
                    "description": "FASTA transcriptome file - generated from the main FASTA if not provided."
                },
                "star_index": {
                    "name": "STAR Index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "STAR_GENOMEGENERATE",
                        "filetype": ""
                    },
                    "description": "A genome index built with STAR."
                },
                "rsem_index": {
                    "name": "RSEM Index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "RSEM_PREPAREREFERENCE_GENOME",
                        "filetype": ""
                    },
                    "description": "A genome index built with RSEM."
                },
                "splicesites": {
                    "name": "Splicesites",
                    "type": "file",
                    "pattern": "txt",
                    "required": false,
                    "genome_output": {
                        "process": "HISAT2_EXTRACTSPLICESITES",
                        "filetype": "txt"
                    },
                    "description": "Splicesites needed for HISAT2 processing."
                },
                "hisat2_index": {
                    "name": "HISAT2 Index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "HISAT2_BUILD",
                        "filetype": ""
                    },
                    "description": "A genome index built with HISAT2."
                },
                "salmon_index": {
                    "name": "Salmon Index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "SALMON_INDEX",
                        "filetype": ""
                    },
                    "description": "A genome index built with Salmon."
                }
            }
        },
        "umi_options": {
            "name": "UMI Settings",
            "description": "Settings for dealing with UMIs",
            "advanced": true,
            "properties": {
                "with_umi": {
                    "name": "Deduplicate based on UMIs",
                    "description": "Enable UMI-based read deduplication.",
                    "type": "boolean",
                    "default": false
                },
                "skip_umi_extract": {
                    "name": "Skip UMI Extraction",
                    "description": "Skip the UMI extraction from the read in case the UMIs have been moved to the headers in advance of the pipeline run.",
                    "type": "boolean"
                },
                "umitools_extract_method": {
                    "name": "Type of UMI pattern",
                    "description": "UMI pattern to use. Can be either 'string' (default) or 'regex'.",
                    "type": "string"
                },
                "umitools_dedup_stats": {
                    "name": "UMI Tools dedupe stats",
                    "description": "Generate output stats when running 'umi_tools dedup'.",
                    "type": "boolean"
                },
                "umitools_bc_pattern": {
                    "name": "UMI Tools read 1 barcode pattern",
                    "description": "The UMI barcode pattern to use if the UMI is on read 1 e.g. 'NNNNNN' indicates that the first 6 nucleotides of the read are from the UMI.",
                    "type": "string"
                },
                "umitools_bc_pattern2": {
                    "name": "UMI Tools read 2 barcode pattern",
                    "description": "The UMI barcode pattern to use if the UMI is on read 2 e.g. 'NNNNNN' indicates that the first 6 nucleotides of the read are from the UMI.",
                    "type": "string"
                },
                "umi_discard_read": {
                    "name": "Discard reads",
                    "description": "After UMI barcode extraction discard either R1 or R2 by setting this parameter to 1 or 2, respectively.",
                    "type": "number"
                },
                "umitools_umi_separator": {
                    "name": "UMI Tools UMI Seperator",
                    "description": "The character that separates the UMI in the read name. Most likely a colon if you skipped the extraction with UMI-tools and used other software.",
                    "type": "string"
                },
                "umitools_grouping_method": {
                    "name": "UMI Tools Grouping Method",
                    "description": "Method to use to determine read groups by subsuming those with similar UMIs. All methods start by identifying the reads with the same mapping position, but treat similar yet nonidentical UMIs differently.",
                    "type": "string"
                },
                "save_umi_intermeds": {
                    "name": "Save UMI Tools intermediates",
                    "description": "If this option is specified, intermediate FastQ and BAM files produced by UMI-tools are also saved in the results directory.",
                    "type": "boolean"
                }
            }
        },
        "read_trimming_options": {
            "name": "Read Trimming Settings",
            "description": "Settings to control read quality and adaptor trimming",
            "advanced": true,
            "properties": {
                "trimmer": {
                    "name": "trimmer",
                    "required": false,
                    "description": "Specifies the trimming tool to use - available options are 'trimgalore' and 'fastp'.",
                    "default": "trimgalore",
                    "type": "string"
                },
                "min_trimmed_reads": {
                    "name": "Minimum trimmed reads",
                    "description": "Minimum number of trimmed reads below which samples are removed from further processing. Some downstream steps in the pipeline will fail if this threshold is too low.",
                    "type": "number"
                },
                "skip_trimming": {
                    "name": "Skip trimming",
                    "description": "Skip the adapter trimming step.",
                    "type": "boolean"
                },
                "save_trimmed": {
                    "name": "Save trimmed",
                    "description": "Save the trimmed FastQ files in the results directory.",
                    "type": "boolean"
                },
                "extra_trimgalore_args": {
                    "name": "extra_trimgalore_args",
                    "required": false,
                    "description": "Extra arguments to pass to Trim Galore! command in addition to defaults defined by the pipeline.",
                    "type": "string"
                },
                "extra_fastp_args": {
                    "name": "extra_fastp_args",
                    "required": false,
                    "description": "Extra arguments to pass to fastp command in addition to defaults defined by the pipeline.",
                    "type": "string"
                }
            }
        },
        "alignment_options": {
            "name": "Alignment Settings",
            "description": "Settings to control alignment algorithms and quantification.",
            "advanced": true,
            "properties": {
                "aligner": {
                    "name": "Aligner",
                    "description": "Specifies the alignment algorithm to use - available options are 'star_salmon', 'star_rsem' and 'hisat2'.",
                    "type": "string"
                },
                "pseudo_aligner": {
                    "name": "Pseudo-aligner",
                    "description": "Specifies the pseudo-aligner to use - available options are 'salmon'. Runs in addition to '--aligner'.",
                    "type": "string"
                },
                "bam_csi_index": {
                    "name": "CSI index",
                    "description": "Create a CSI index for BAM files instead of the traditional BAI index. This will be required for genomes with larger chromosome sizes.",
                    "type": "boolean"
                },
                "star_ignore_sjdbgtf": {
                    "name": "STAR ignore sjdbgtf",
                    "description": "When using pre-built STAR indices do not re-extract and use splice junctions from the GTF file.",
                    "type": "boolean"
                },
                "salmon_quant_libtype": {
                    "name": "Salmon strandedness",
                    "description": "Override Salmon library type inferred based on strandedness defined in meta object.",
                    "type": "string"
                },
                "min_mapped_reads": {
                    "name": "Minimum mapped reads (%)",
                    "description": "Minimum percentage of uniquely mapped reads below which samples are removed from further processing.",
                    "type": "number"
                },
                "seq_center": {
                    "name": "Sequencing center",
                    "description": "Sequencing center information to be added to read group of BAM files.",
                    "type": "string"
                },
                "stringtie_ignore_gtf": {
                    "name": "Stringtie",
                    "description": "Perform reference-guided de novo assembly of transcripts using StringTie i.e. dont restrict to those in GTF file.",
                    "type": "boolean"
                },
                "extra_star_align_args": {
                    "name": "STAR arguments",
                    "description": "Extra arguments to pass to STAR alignment command in addition to defaults defined by the pipeline.",
                    "type": "string"
                },
                "extra_salmon_quant_args": {
                    "name": "Salmon quant arguments",
                    "description": "Extra arguments to pass to Salmon quant command in addition to defaults defined by the pipeline.",
                    "type": "string"
                },
                "save_unaligned": {
                    "name": "Save unaligned reads",
                    "description": "Where possible, save unaligned reads from either STAR, HISAT2 or Salmon to the results directory.",
                    "type": "boolean"
                },
                "save_align_intermeds": {
                    "name": "Save intermediate BAM",
                    "description": "Save the intermediate BAM files from the alignment step.",
                    "type": "boolean"
                },
                "skip_markduplicates": {
                    "name": "Skip MarkDuplicates",
                    "description": "Skip picard MarkDuplicates step.",
                    "type": "boolean"
                },
                "skip_alignment": {
                    "name": "Skip alignment",
                    "description": "Skip all of the alignment-based processes within the pipeline.",
                    "type": "boolean"
                },
                "skip_pseudo_alignment": {
                    "name": "Skip Pseudo-alignment",
                    "required": false,
                    "description": "Skip all of the pseudo-alignment-based processes within the pipeline.",
                    "type": "boolean"
                }
            }
        },
        "ribosomal_options": {
            "name": "Ribosomal RNA Settings",
            "description": "Settings to control how ribsomal RNa is handled.",
            "advanced": true,
            "properties": {
                "remove_ribo_rna": {
                    "name": "Remove Ribo RNA",
                    "description": "Enable the removal of reads derived from ribosomal RNA using SortMeRNA.",
                    "type": "boolean"
                },
                "ribo_database_manifest": {
                    "name": "Ribo Database Manifest",
                    "description": "Text file containing paths to fasta files (one per line) that will be used to create the database for SortMeRNA.",
                    "type": "string",
                    "default": "${projectDir}/assets/rrna-db-defaults.txt"
                },
                "save_non_ribo_reads": {
                    "name": "Save non-ribo Reads",
                    "description": "If this option is specified, intermediate FastQ files containing non-rRNA reads will be saved in the results directory.",
                    "type": "boolean"
                }
            }
        },
        "process_options": {
            "name": "Process skipping options",
            "description": "Settings to control specific processes.",
            "advanced": true,
            "properties": {
                "rseqc_modules": {
                    "name": "RSeQC",
                    "description": "Specify the RSeQC modules to run. Default: 'bam_stat,inner_distance,infer_experiment,junction_annotation,junction_saturation,read_distribution,read_duplication'",
                    "type": "string"
                },
                "deseq2_vst": {
                    "name": "DeSeq2 VST",
                    "description": "Use vst transformation instead of rlog with DESeq2.",
                    "type": "boolean"
                },
                "skip_bigwig": {
                    "name": "Skip bigwig",
                    "description": "Skip bigWig file creation.",
                    "type": "boolean"
                },
                "skip_stringtie": {
                    "name": "Skip stringtie",
                    "description": "Skip StringTie.",
                    "type": "boolean"
                },
                "skip_fastqc": {
                    "name": "Skip FastQC",
                    "description": "Skip FastQC.",
                    "type": "boolean"
                },
                "skip_preseq": {
                    "name": "Skip preseq",
                    "description": "Skip Preseq.",
                    "type": "boolean"
                },
                "skip_dupradar": {
                    "name": "Skip dupRadar",
                    "description": "Skip dupRadar.",
                    "type": "string"
                },
                "skip_qualimap": {
                    "name": "Skip Qualimap",
                    "description": "Skip Qualimap.",
                    "type": "boolean"
                },
                "skip_rseqc": {
                    "name": "Skip RSeQC",
                    "description": "Skip RSeQC.",
                    "type": "boolean"
                },
                "skip_biotype_qc": {
                    "name": "Skip biotype QC",
                    "description": "Skip additional featureCounts process for biotype QC.",
                    "type": "boolean"
                },
                "skip_deseq2_qc": {
                    "name": "Skip DeSeq2 QC",
                    "description": "Skip DESeq2 PCA and heatmap plotting.",
                    "type": "boolean"
                },
                "skip_multiqc": {
                    "name": "Skip MultiQC",
                    "description": "Skip MultiQC.",
                    "type": "boolean"
                },
                "skip_qc": {
                    "name": "Skip QC",
                    "description": "Skip all QC steps except for MultiQC.",
                    "type": "boolean"
                }
            }
        },
        "pipeline_options": {
            "name": "General pipeline options",
            "description": "Settings to control general pipeline options.",
            "advanced": true,
            "properties": {
                "email": {
                    "name": "Email",
                    "description": "Email address for completion summary.",
                    "type": "string"
                },
                "multiqc_title": {
                    "name": "MultiQC Report Title",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "type": "string"
                },
                "multiqc_methods_description": {
                    "name": "multiqc_methods_description",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "type": "string"
                }
            }
        }
    },
    "outputs": [
        {
            "name": "MultiQC report",
            "description": "Report aggregating all QC reporting including FastQC, alignment stats and DeSeq2 plots.",
            "filetype": "html",
            "process": "MULTIQC"
        },
        {
            "name": "Normalised bigwig fwd",
            "description": "Genome-wide coverage bigwig to be viewed in genome browser. Contains reads mapping to fwd strand.",
            "filetype": "bigwig",
            "process": "BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG"
        },
        {
            "name": "Normalised bigwig rev",
            "description": "Genome-wide coverage bigwig to be viewed in genome browser. Contains reads mapping to rev strand.",
            "filetype": "bigwig",
            "process": "BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG"
        },
        {
            "name": "Salmon transcript TPM table",
            "description": "Table containing transcript per million (TPM) quantified transcripts per sample.",
            "filetype": "transcript_tpm.tsv",
            "process": "SALMON_TXIMPORT"
        },
        {
            "name": "Salmon transcript raw counts for downstream analysis",
            "description": "RDS file containing transcript raw counts per sample.",
            "filetype": "rds",
            "process": "SALMON_SE_TRANSCRIPT"
        },
        {
            "name": "Salmon gene TPM table",
            "description": "Table containing transcript per million (TPM) quantified genes per sample.",
            "filetype": "gene_tpm.tsv",
            "process": "SALMON_TXIMPORT"
        },
        {
            "name": "Salmon gene raw counts for DeSeq2",
            "description": "RDS file containing gene raw counts per sample.",
            "filetype": "rds",
            "process": "SALMON_SE_GENE"
        },
        {
            "name": "RSEM counts",
            "description": "Tables containing gene and transcript counts per sample as quantified by RSEM.",
            "filetype": "tsv",
            "process": "RSEM_MERGE_COUNTS"
        }
    ]
}