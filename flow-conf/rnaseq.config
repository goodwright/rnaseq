includeConfig "../flow-conf/base.config"

manifest {
    name            = 'nf-core/rnaseq'
    author          = 'Harshil Patel, Phil Ewels, Rickard HammarÃ©n'
    homePage        = 'https://github.com/nf-core/rnaseq'
    description     = 'RNA sequencing analysis pipeline for gene/isoform quantification and extensive quality control.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '3.8.1'
}

params {

    // Input options
    input                      = null

    // References
    genome                     = null
    genomes                    = [:]
    transcript_fasta           = null
    additional_fasta           = null
    splicesites                = null
    gtf_extra_attributes       = 'gene_name'
    gtf_group_features         = 'gene_id'
    featurecounts_feature_type = 'exon'
    featurecounts_group_type   = 'gene_biotype'
    gencode                    = false
    save_reference             = false

    // UMI handling
    with_umi                   = false
    skip_umi_extract           = false
    umitools_extract_method    = 'string'
    umitools_dedup_stats       = false
    umitools_bc_pattern        = null
    umi_discard_read           = null
    save_umi_intermeds         = false

    // Trimming
    min_trimmed_reads          = 10000
    clip_r1                    = null
    clip_r2                    = null
    three_prime_clip_r1        = null
    three_prime_clip_r2        = null
    trim_nextseq               = null
    save_trimmed               = false
    skip_trimming              = false

    // BBSplit genome filtering
    bbsplit_fasta_list         = null
    save_bbsplit_reads         = false
    skip_bbsplit               = true

    // Ribosomal RNA removal
    remove_ribo_rna            = false
    save_non_ribo_reads        = false
    ribo_database_manifest     = "${projectDir}/assets/rrna-db-defaults.txt"

    // Alignment
    aligner                    = 'star_salmon'
    pseudo_aligner             = null
    seq_center                 = null
    bam_csi_index              = false
    star_ignore_sjdbgtf        = false
    salmon_quant_libtype       = null
    hisat2_build_memory        = '200.GB'  // Amount of memory required to build HISAT2 index with splice sites
    stringtie_ignore_gtf       = false
    min_mapped_reads           = 5
    save_merged_fastq          = false
    save_unaligned             = false
    save_align_intermeds       = false
    skip_markduplicates        = false
    skip_alignment             = false

    // QC
    skip_qc                    = false
    skip_bigwig                = false
    skip_stringtie             = false
    skip_fastqc                = false
    skip_preseq                = false
    skip_dupradar              = false
    skip_qualimap              = false
    skip_rseqc                 = false
    skip_biotype_qc            = false
    skip_deseq2_qc             = false
    skip_multiqc               = false
    deseq2_vst                 = false
    rseqc_modules              = 'bam_stat,inner_distance,infer_experiment,junction_annotation,junction_saturation,read_distribution,read_duplication'

    // Boilerplate options
    multiqc_config             = null
    multiqc_title              = null
    email                      = null
    email_on_fail              = null
    max_multiqc_email_size     = '25.MB'
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    publish_dir_mode           = 'copy'
    igenomes_ignore            = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

def rseqc_modules = params.rseqc_modules ? params.rseqc_modules.split(',').collect{ it.trim().toLowerCase() } : []

process {

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
    }

    withName: 'SALMON_INDEX' {
        ext.args   = params.gencode ? '--gencode' : ''
    }

    withName: 'RSEM_PREPAREREFERENCE_GENOME' {
        ext.args   = '--star'
    }
}

if (!params.skip_bbsplit && params.bbsplit_fasta_list) {
    process {
        withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
            ext.args   = 'build=1'
        }
    }
}

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = [
                params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
            ].join(' ').trim()
        }
    }
}

if (!params.skip_bbsplit) {
    process {
        withName: 'BBMAP_BBSPLIT' {
            ext.args   = 'build=1 ambiguous2=all maxindel=150000'
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 --fastx -v'
        }
    }
}

if (!params.skip_alignment) {
    process {
        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
        }
    }

    if (!params.skip_markduplicates) {
        process {
            withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
                ext.prefix = { "${meta.id}.markdup.sorted" }
            }

            withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.markdup.sorted" }
            }
        }
    }

    if (params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)) {
        process {
            withName: '.*:DEDUP_UMI_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
                ext.args = { meta.single_end ? '' : '--unpaired-reads=discard --chimeric-pairs=discard' }
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            }

            withName: '.*:DEDUP_UMI_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            }
        }
    }

    if (!params.skip_bigwig) {
        process {
            withName: 'BEDTOOLS_GENOMECOV' {
                ext.args   = '-split -du'
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.forward" }
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.forward" }
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.reverse" }
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.reverse" }
            }
        }
    }

    if (!params.skip_stringtie) {
        process {
            withName: 'STRINGTIE_STRINGTIE' {
                ext.args   = [
                    '-v',
                    params.stringtie_ignore_gtf ? '' : '-e'
                ].join(' ').trim()
            }
        }
    }
}

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
        }
    }

    if (params.with_umi) {
        process {
            withName: 'NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT' {
                ext.args   = '-n'
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:UMITOOLS_PREPAREFORRSEM' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.transcriptome.sorted" }
            }

            withName: '.*:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
                ext.args = { meta.single_end ? '' : '--unpaired-reads=discard --chimeric-pairs=discard' }
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
            }
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_STAR_SALMON' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'star_salmon'
            }
        }
    }
}

if (!params.skip_alignment && params.aligner == 'star_rsem') {
    process {
        withName: '.*:QUANTIFY_RSEM:RSEM_CALCULATEEXPRESSION' {
            ext.args   = [
                '--star',
                '--star-output-genome-bam',
                '--star-gzipped-read-file',
                '--estimate-rspd',
                '--seed 1'
            ].join(' ').trim()
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_RSEM' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'star_rsem'
            }
        }
    }
}

if (!params.skip_alignment && params.aligner == 'hisat2') {
    process {
        withName: '.*:ALIGN_HISAT2:HISAT2_ALIGN' {
            ext.args   = '--met-stderr --new-summary --dta'
        }
    }
}

if (!params.skip_alignment && !params.skip_qc) {
    if (!params.skip_preseq) {
        process {
            withName: 'PRESEQ_LCEXTRAP' {
                ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
            }
        }
    }

    if (!params.skip_biotype_qc && params.featurecounts_group_type) {
        process {
            withName: 'SUBREAD_FEATURECOUNTS' {
                ext.args   = [
                    '-B -C',
                    params.gencode ? "-g gene_type" : "-g $params.featurecounts_group_type",
                    "-t $params.featurecounts_feature_type"
                ].join(' ').trim()
            }
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        }
    }
}

if (params.pseudo_aligner == 'salmon') {
    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_SALMON' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'salmon'
            }
        }
    }
}



profiles {
    test {
        params {
            max_cpus   = 2
            max_memory = '6.GB'
            max_time   = '6.h'



            
            input = "https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/samplesheet/v3.4/samplesheet_test.csv"

            fasta              = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genome.fasta"
            gtf                = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genes.gtf.gz"
            transcript_fasta   = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/transcriptome.fasta"
            additional_fasta   = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/gfp.fa.gz"

            bbsplit_fasta_list = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/bbsplit_fasta_list.txt"
            hisat2_index       = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/hisat2.tar.gz"
            salmon_index       = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/salmon.tar.gz"
            rsem_index         = "https://github.com/nf-core/test-datasets/raw/rnaseq/reference/rsem.tar.gz"

            skip_bbsplit        = false
            pseudo_aligner      = "salmon"
            umitools_bc_pattern = "NNNN"
        }

        process {
            withName: "RSEM_PREPAREREFERENCE_GENOME" {
                ext.args2 = "--genomeSAindexNbases 7"
            }
        }
    }
}